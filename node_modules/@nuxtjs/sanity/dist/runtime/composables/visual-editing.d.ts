import type { Ref } from 'vue';
import type { QueryStore } from '@sanity/core-loader';
import type { EncodeDataAttributeFunction } from '@sanity/core-loader/encode-data-attribute';
import type { ClientPerspective, ContentSourceMap, QueryParams } from '@sanity/client';
import type { AsyncDataOptions } from 'nuxt/app';
import type { ClientConfig, SanityClient } from '../client';
import type { SanityVisualEditingMode, SanityVisualEditingRefreshHandler, SanityVisualEditingZIndex } from '../../module';
export interface SanityVisualEditingConfiguration {
    mode: SanityVisualEditingMode;
    previewMode: boolean | {
        enable?: string;
        disable?: string;
    };
    previewModeId?: string;
    proxyEndpoint: string;
    refresh?: SanityVisualEditingRefreshHandler;
    studioUrl: string;
    token?: string;
    zIndex?: SanityVisualEditingZIndex;
}
export interface SanityHelperConfiguration extends ClientConfig {
    visualEditing?: SanityVisualEditingConfiguration;
}
export interface SanityHelper {
    client: SanityClient;
    config: SanityHelperConfiguration;
    fetch: SanityClient['fetch'];
    setToken: (token: string) => void;
    queryStore?: QueryStore;
}
export interface VisualEditingProps {
    refresh?: SanityVisualEditingRefreshHandler;
    zIndex?: SanityVisualEditingZIndex;
}
type AsyncDataRequestStatus = 'idle' | 'pending' | 'success' | 'error';
interface AsyncDataExecuteOptions {
    _initial?: boolean;
    dedupe?: boolean;
}
interface UseSanityQueryOptions<T> extends AsyncDataOptions<T> {
    client?: string;
    perspective?: 'previewDrafts' | 'published' | 'raw';
}
interface SanityQueryResponse<T> {
    data: T;
    sourceMap?: ContentSourceMap;
    perspective?: ClientPerspective;
}
type Noop = () => void;
interface _AsyncSanityData<DataT, ErrorT> {
    data: Ref<DataT>;
    sourceMap: Ref<ContentSourceMap | null>;
    encodeDataAttribute: Ref<EncodeDataAttributeFunction | Noop>;
    pending: Ref<boolean>;
    refresh: (opts?: AsyncDataExecuteOptions) => Promise<void>;
    execute: (opts?: AsyncDataExecuteOptions) => Promise<void>;
    error: Ref<ErrorT | null>;
    status: Ref<AsyncDataRequestStatus>;
}
export type AsyncSanityData<Data, Error> = _AsyncSanityData<Data, Error> & Promise<_AsyncSanityData<Data, Error>>;
export declare const useSanityVisualEditingState: () => {
    enabled: boolean;
    inFrame: boolean | undefined;
};
export declare const useSanity: (client?: string) => SanityHelper;
export declare const useSanityQuery: <T = unknown, E = Error>(query: string, _params?: QueryParams, _options?: UseSanityQueryOptions<SanityQueryResponse<T | null>>) => AsyncSanityData<T | null, E>;
export declare function useSanityLiveMode(options?: {
    client?: string;
}): () => void;
export declare function useSanityVisualEditing(options?: VisualEditingProps): () => void;
export {};
