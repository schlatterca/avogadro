import { defu } from "defu";
import { hash } from "ohash";
import { reactive } from "vue";
import { useNuxtApp, useRuntimeConfig, useAsyncData, useLazyAsyncData, createSanityClient } from "#imports";
const createSanityHelper = (options) => {
  const config = { ...options };
  let client = createSanityClient(config);
  return {
    client,
    config,
    // @ts-expect-error untyped args
    fetch: (...args) => client.fetch(...args),
    setToken(token) {
      config.token = token;
      client = createSanityClient(config);
    }
  };
};
export const useSanity = (client = "default") => {
  const nuxtApp = useNuxtApp();
  if (nuxtApp._sanity?.[client]) {
    return nuxtApp._sanity[client];
  }
  nuxtApp._sanity = nuxtApp._sanity || {};
  const $config = useRuntimeConfig();
  const { additionalClients = {}, ...options } = defu($config.sanity, $config.public.sanity);
  if (!options.disableSmartCdn && nuxtApp.$preview) {
    options.useCdn = false;
  } else if (!import.meta.dev && !options.useCdn && !options.token) {
    options.useCdn = true;
  }
  if (client === "default") {
    nuxtApp._sanity.default = createSanityHelper(options);
    return nuxtApp._sanity.default;
  }
  nuxtApp._sanity[client] = createSanityHelper(defu(additionalClients[client], options));
  return nuxtApp._sanity[client];
};
export const useSanityQuery = (query, _params, _options = {}) => {
  const { client, ...options } = _options;
  const sanity = useSanity(client);
  const params = _params ? reactive(_params) : void 0;
  if (params) {
    options.watch = options.watch || [];
    options.watch.push(params);
  }
  return useAsyncData("sanity-" + hash(query + (params ? JSON.stringify(params) : "")), () => sanity.fetch(query, params || {}), options);
};
export const useLazySanityQuery = (query, _params, _options = {}) => {
  const { client, ...options } = _options;
  const sanity = useSanity(client);
  const params = _params ? reactive(_params) : void 0;
  if (params) {
    options.watch = options.watch || [];
    options.watch.push(params);
  }
  return useLazyAsyncData("sanity-" + hash(query + (params ? JSON.stringify(params) : "")), () => sanity.fetch(query, params || {}), options);
};
