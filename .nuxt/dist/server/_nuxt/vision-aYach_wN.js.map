{"version":3,"file":"vision-aYach_wN.js","sources":["../../../../pages/vision.vue"],"sourcesContent":["<template>\n    <div>\n\n        <div id=\"headOverlay\"></div>\n        <div id=\"header-component\" class=\"z-50\">\n            <Header></Header>\n        </div>\n\n        <transition name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\">\n            <div v-if=\"loading\" class=\"bg-white w-screen h-screen fixed top-0 left-0\">\n            </div>\n            <div v-else>\n                <div id=\"header-component\" class=\"pointer-events-none\">\n                    <Header></Header>\n                </div>\n\n                <div id='snapContainer' class=\"flex flex-col overflow-scroll snap-mandatory snap-y absolute left-0 top-0\n                w-screen h-screen select-none\" ref=\"snapContainer\"\n                @wheel=\"onScroll\">\n                <!--snap-mandatory snap-x-->\n\n                    <!-- <div class=\"overlay\" id=\"overlay\"></div> -->\n\n                    <div v-for=\"slide in myData.slides\"\n                    :key=\"slide._key\"\n                    class=\"slide pic relative snap-start w-screen h-screen shrink-0 flex gap-20px items-end p-0\n                    overflow-hidden bg-lightgrey\">\n\n                        <div v-if=\"slide.description\"\n                        class=\"text absolute bottom-0 left-0 w-full z-10 text-white\n                        p-20px pr-66% pointer-events-none\n                        leading-tight text-base blur-[20px] transition-[filter] duration-[2000ms]\">\n                            <p class=\"text-xl mb-8\" v-html=\"slide.title\"></p>\n                            <p class=\"DM-Mono text-base\" v-html=\"slide.description\"></p>\n                        </div>\n                        \n                        <figure class=\"pic w-full h-full\">\n                            <img v-if=\"slide.image\"\n                            :src=\"imageUrlFor(slide.image.asset)\"\n                            class=\"pic vision object-cover transition-[filter] duration-[1200ms]\n                            transform scale-[1.2]\"\n                            :class=\"{ 'blur-[20px]': slide.title }\" />\n                        </figure>\n                    </div>\n\n                </div>\n            </div>\n        </transition>\n    </div>\n</template>\n  \n\n<script setup>\nimport { onMounted, ref, nextTick, computed } from 'vue';\nimport { useWindowSize } from '@vueuse/core'\nimport sanity from \"../sanity/sanity.js\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport { useRoute } from 'vue-router';\nimport { useMyStore } from '../store/store.js';\n\nconst imageBuilder = imageUrlBuilder(sanity);\nconst route = useRoute();\nconst slug = route.params.slug;\n\nconst loading = ref(true);\nconst myData = ref([]);\n\nuseHead({\n    title: \"Cecilia Avogadro\",\n    meta: [{ name: \"description\", content: \"\" }],\n});\n\n// import store from '../store'\n\nconst otherQuery = `*[_type == \"vision\"]{\n    title,\n    slides[]{\n        _key,\n        _type,\n        title,\n        image,\n        description,\n    }\n}[0...50]`;\n/* const otherQuery = `*[_type == \"vision\"]{\n    _id,\n    _type,\n    title,\n    slides[]{\n        _key,\n        _type,\n        title,\n        image,\n        description,\n        }\n    }\n}[0...50]`; */\n\nconst imageUrlFor = (source) => {\n  return imageBuilder.image(source);\n};\n\n\n\nconst fetchData = () => {\n    loading.value = true;\n    sanity.fetch(otherQuery).then(\n        (data) => {\n            console.log(otherQuery)\n            console.log('data: ', data[0]);\n            loading.value = false;\n            myData.value = data[0];\n\n            //console.log('aaa', isContentCenter(data[0].slides.justify));\n        },\n        (error) => {\n            loading.value = false;\n            console.error(error);\n        }\n    );\n};\nonMounted(() => {\n    fetchData();\n});\n/* const query = groq`*[_type == \"vision\"]`;\nconst { data } = useSanityQuery(query);\nconsole.log(\"data:\", data); */\n\n\n\n//if contains gifs\nconst store = useMyStore();\n\nlet accumulatedDeltaY = 0; // Track accumulated scroll amount\n\nfunction onScroll(event) {\n    if(!event.target.parentElement.parentElement.querySelector('.text')){\n        return\n    }\n    if(!event.target.classList.contains('isUnblurred')){\n        \n        const mySlideImg = event.target;\n        let imgBlur = mySlideImg.style.filter.split(/blur\\(|px\\)/)[1];\n\n        if(imgBlur <= 0){\n            setTimeout(() => {\n                event.target.classList.add('isUnblurred')\n            }, 2000)\n        }\n\n        event.preventDefault();\n        const maxBlur = 20;\n        const minBlur = 0;\n        const blurStep = 0.06; // Adjust blur per unit of deltaY\n        accumulatedDeltaY += Math.abs(event.deltaY);\n        let newBlur = maxBlur - Math.max(0, (accumulatedDeltaY * blurStep) - 60);\n        newBlur = Math.max(minBlur, Math.min(maxBlur, newBlur));\n\n        mySlideImg.style.filter = `blur(${newBlur}px)`;\n        mySlideImg.parentElement.parentElement.querySelector('.text').style.filter = `blur(${newBlur}px)`;\n\n        return\n    } else {\n\n        const container = event.currentTarget;\n        const slides = Array.from(container.querySelectorAll('.slide'));\n        \n        let targetIndex = slides.find(slide => slide.querySelector('img') && !slide.querySelector('img').classList.contains('isUnblurred'));\n        let slidesWithTextStillBlurred = slides.find(slide => slide.querySelector('div.text') && !slide.querySelector('img').classList.contains('isUnblurred'));\n\n        //if there are still slides with text\n        if(slidesWithTextStillBlurred){\n            targetIndex.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start',\n            });\n        }\n\n        return\n    }\n\n}\n\n\n\n\n</script>\n\n\n\n<script>\nexport default {\n  methods: {\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // Trigger reflow\n      el.style.transition = 'opacity 0.5s';\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = 'opacity 0.5s';\n      el.style.opacity = 0;\n      done();\n    },\n    imageUrlFor(image) {\n      // Define your method to generate image URL\n      return `path/to/images/${image}`;\n    }\n  }\n};\n</script>"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAkMA,MAAA,cAAe;AAAA,EACb,SAAS;AAAA,IACP,YAAY,IAAI;AACd,SAAG,MAAM,UAAU;AAAA,IACpB;AAAA,IACD,MAAM,IAAI,MAAM;AACd,SAAG;AACH,SAAG,MAAM,aAAa;AACtB,SAAG,MAAM,UAAU;AACnB;IACD;AAAA,IACD,MAAM,IAAI,MAAM;AACd,SAAG,MAAM,aAAa;AACtB,SAAG,MAAM,UAAU;AACnB;IACD;AAAA,IACD,YAAY,OAAO;AAEjB,aAAO,kBAAkB,KAAK;AAAA,IAC/B;AAAA,EACF;AACH;;;;;AAxJA,UAAM,eAAe,gBAAgB,MAAM;AAC3C,UAAM,QAAQ,SAAQ;AACT,UAAM,OAAO;AAE1B,UAAM,UAAU,IAAI,IAAI;AACxB,UAAM,SAAS,IAAI,CAAA,CAAE;AAErB,YAAQ;AAAA,MACJ,OAAO;AAAA,MACP,MAAM,CAAC,EAAE,MAAM,eAAe,SAAS,GAAE,CAAE;AAAA,IAC/C,CAAC;AA4BD,UAAM,cAAc,CAAC,WAAW;AAC9B,aAAO,aAAa,MAAM,MAAM;AAAA,IAClC;AA+Bc,eAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}