{"version":3,"file":"vision-aQxU2_AR.js","sources":["../../../../pages/vision.vue"],"sourcesContent":["<template>\n    <div id=\"mainVision\">\n\n        <div id=\"headOverlay\" class=\"transition-opacity duration-[2000ms] opacity-0\"></div>\n        <div id=\"header-component\" class=\"z-50\">\n            <Header></Header>\n        </div>\n\n        <transition name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\">\n            <div v-if=\"loading\" class=\"bg-white w-screen h-[100dvh] fixed top-0 left-0\">\n            </div>\n            <div v-else>\n                <div id=\"header-component\" class=\"pointer-events-none\">\n                    <Header></Header>\n                </div>\n\n                <div id='snapContainer' class=\"flex flex-col overflow-scroll snap-mandatory snap-y absolute left-0 top-0\n                w-screen h-[100dvh] select-none overflow-y-hidden\" ref=\"snapContainer\"\n                @scroll.passive=\"onScroll\">\n                <!--snap-mandatory snap-x @wheel=\"debouncedScroll\"-->\n\n                    <!-- <div class=\"overlay\" id=\"overlay\"></div> -->\n\n                    <div v-for=\"(slide, index) in myData.slides\"\n                    :key=\"slide._key\"\n                    class=\"slide pic relative snap-start w-screen h-[100dvh] shrink-0 flex gap-20px items-end p-0\n                    overflow-hidden snap-always\"><!-- bg-lightgrey -->\n\n                        <div v-if=\"slide.description\"\n                        class=\"text fixed m-0 text-white pointer-events-none\n                        text-m DM-Mono z-50\n                        opacity-0 blur-0 transition-all duration-[600ms]\n                        left-20px md:left-[calc(calc(23vw+2px))]\n                        top-[unset] md:top-[50%]\n                        bottom-20px md:bottom-[unset]\n                        w-auto md:w-80 max-w-[80vw] md:max-w-[unset]\">\n                        <!-- text absolute bottom-0 left-0 w-full z-10 text-white\n                        p-20px pr-66% pointer-events-none\n                        leading-tight text-m blur-[20px] transition-[filter] duration-[1200ms] -->\n                            <p class=\"text-xl mb-8\" v-html=\"slide.title\"></p>\n                            <p class=\"DM-Mono text-m\" v-html=\"slide.description\"></p>\n                        </div>\n\n                        <div class=\"absolute bottom-0 left-0 w-full h-full z-[5] pointer-events-none transition-opacity duration-[2000ms]\"\n                        :class=\"{'opacity-0':index == 0, 'firstBackground':index == 0}\"\n                        style=\"background: linear-gradient(to top, rgba(0,0,0,0.4) 30%, rgba(255,255,255,0) 60%)\"></div>\n                        \n                        <figure class=\"pic w-full h-full\">\n                            <img v-if=\"!isMobile && slide.image\"\n                            :src=\"imageUrlFor(slide.image.asset)\"\n                            class=\"pic vision object-cover transition-opacity duration-[2000ms]\n                            transform scale-[1.2]\"\n                            :class=\"{'opacity-0':index == 0, 'firstImage':index == 0}\"\n                            />\n                            <img v-if=\"isMobile && slide.image_mobile\"\n                            :src=\"imageUrlFor(slide.image_mobile.asset)\"\n                            class=\"pic vision object-cover transition-opacity duration-[2000ms]\n                            transform scale-[1.2]\"\n                            :class=\"{'opacity-0':index == 0, 'firstImage':index == 0}\"\n                            />\n                            <!-- :class=\"{ 'blur-[20px]': slide.title, 'noblur': !slide.description }\" -->\n                        </figure>\n                    </div>\n\n                </div>\n            </div>\n        </transition>\n    </div>\n</template>\n  \n\n<script setup>\nimport { onMounted, ref, nextTick, computed } from 'vue';\nimport { useWindowSize } from '@vueuse/core'\nimport sanity from \"../sanity/sanity.js\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport { useRoute } from 'vue-router';\nimport { useMyStore } from '../store/store.js';\nconst { width } = useWindowSize();\n\nconst imageBuilder = imageUrlBuilder(sanity);\nconst route = useRoute();\nconst slug = route.params.slug;\n\nconst loading = ref(true);\nconst myData = ref([]);\nconst snapContainer = ref(null);\nlet isMobile = computed(() => width.value <= 768);\n\nuseHead({\n    title: \"Cecilia Avogadro\",\n    meta: [{ name: \"description\", content: \"\" }],\n});\n\n// import store from '../store'\n\nconst otherQuery = `*[_type == \"vision\"]{\n    title,\n    slides[]{\n        _key,\n        _type,\n        title,\n        image,\n        image_mobile,\n        description,\n    }\n}[0...50]`;\n/* const otherQuery = `*[_type == \"vision\"]{\n    _id,\n    _type,\n    title,\n    slides[]{\n        _key,\n        _type,\n        title,\n        image,\n        description,\n        }\n    }\n}[0...50]`; */\n\nconst imageUrlFor = (source) => {\n  return imageBuilder.image(source);\n};\n\n\n\nconst fetchData = () => {\n    loading.value = true;\n    sanity.fetch(otherQuery).then(\n        (data) => {\n            //console.log(otherQuery)\n            //console.log('data: ', data[0]);\n            loading.value = false;\n            myData.value = data[0];\n\n            //console.log('aaa', isContentCenter(data[0].slides.justify));\n        },\n        (error) => {\n            loading.value = false;\n            console.error(error);\n        }\n    );\n};\nonMounted(() => {\n    fetchData();\n\n    //unblur first slide\n    setTimeout(() => {\n        //const mySlideImg = snapContainer.value.querySelector('img');\n        //let imgBlur = mySlideImg.classList.value.split(' ').find(myClass => myClass.includes('blur-')).split('[')[1].split('px')[0];\n        //let imgBlur = mySlideImg.classList.filter.split(/blur\\(|px\\)/)[1];\n        //console.log(imgBlur)\n        /* if(imgBlur <= 0){\n            setTimeout(() => {\n                mySlideImg.classList.add('isUnblurred')\n            }, 2000)\n        } */\n        /* const maxBlur = 20;\n        const minBlur = 0;\n        const blurStep = 0.06; // Adjust blur per unit of deltaY\n        accumulatedDeltaY += Math.abs(0);\n        let newBlur = maxBlur - Math.max(0, (accumulatedDeltaY * blurStep) - 60);\n        newBlur = Math.max(minBlur, Math.min(maxBlur, newBlur)); */\n\n        //snapContainer.value.querySelectorAll('img:not(.noblur)')[0].classList.replace('blur-[20px]', 'blur-0');\n        document.querySelector('#headOverlay').classList.replace('opacity-0', 'opacity-100');\n        snapContainer.value.querySelectorAll('.firstBackground')[0].classList.replace('opacity-0', 'opacity-100');\n        snapContainer.value.querySelectorAll('.firstImage')[0].classList.replace('opacity-0', 'opacity-100');\n        //mySlideImg.classList.add('isUnblurred');\n    }, 1000);\n    setTimeout(() => {\n        snapContainer.value.querySelectorAll('.text')[0].classList.replace('blur-[20px]', 'blur-0');\n        snapContainer.value.querySelectorAll('.text')[0].classList.replace('opacity-0', 'opacity-100');\n        snapContainer.value.classList.replace('overflow-y-hidden', 'overflow-y-scroll');\n    }, 3000);\n\n});\n/* const query = groq`*[_type == \"vision\"]`;\nconst { data } = useSanityQuery(query);\nconsole.log(\"data:\", data); */\n\n\n\n\n\n//SCROLLING\nlet isTransitioning = false; // Flag to track if a transition is running\nlet debounceTimeout;\nlet mySlides = [];\n\nfunction debounce(func, delay) {\n  let timeout;\n  return function() {\n    //document.querySelectorAll('img:not(.noblur)').forEach((el) => {el.classList.remove('blur-0'); el.classList.add('blur-[20px]')});\n    document.querySelectorAll('.text.blur-0').forEach((el) => {el.classList.replace('blur-0', 'blur-[20px]')});\n    document.querySelectorAll('.text.opacity-100').forEach((el) => {el.classList.replace('opacity-100', 'opacity-0')});\n\n    const context = this;\n    const args = arguments;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(context, args), delay);\n  };\n}\n\n//if contains gifs\nconst store = useMyStore();\nconst debouncedScroll = debounce(onScroll, 200);\n\nfunction onScroll(event) {\n\n    if(mySlides.length < 1){\n        document.querySelectorAll('.slide').forEach((slide) => {\n            mySlides.push(slide);\n        });\n    }\n\n    clearTimeout(debounceTimeout);\n\n    document.querySelectorAll('.text.blur-0').forEach((el) => {el.classList.replace('blur-0', 'blur-[20px]')});\n    document.querySelectorAll('.text.opacity-100').forEach((el) => {el.classList.replace('opacity-100', 'opacity-0')});\n\n    debounceTimeout = setTimeout(() => {\n        let mySlideIndex = Math.round(snapContainer.value.scrollTop / window.innerHeight);\n\n        if (!isTransitioning && mySlides[mySlideIndex] && mySlides[mySlideIndex].querySelector('img:not(.noblur)')) {\n            //isTransitioning = true;\n\n            const img = mySlides[mySlideIndex].querySelector('img:not(.noblur)');\n            const text = mySlides[mySlideIndex].querySelector('.text');\n\n            if (text && text.classList.contains('blur-[20px]')) {\n                //img.classList.replace('blur-[20px]', 'blur-0');\n                text.classList.replace('blur-[20px]', 'blur-0');\n                text.classList.replace('opacity-0', 'opacity-100');\n\n                /* setTimeout(() => {\n                    img.addEventListener('transitionend', transitionEndHandler, { once: true });\n                    text.addEventListener('transitionend', transitionEndHandler, { once: true });\n                }, 1000); */\n            }\n        }\n    }, 200);\n    \n    \n    /* mySlides.forEach((slide, index) => {\n\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = snapContainer.value.getBoundingClientRect();\n\n        // Check if the slide is fully or partially in view\n        if (slideRect.top >= containerRect.top && slideRect.bottom <= containerRect.bottom) {\n            //console.log(slide)\n            slide.querySelector('img:not(.noblur)').classList.replace('blur-[20px]', 'blur-0')\n            slide.querySelector('.text').classList.replace('blur-[20px]', 'blur-0')\n            slide.querySelector('.text').classList.replace('opacity-0', 'opacity-100')\n        }\n    }); */\n\n\n    /* if(!event.target.parentElement.parentElement.querySelector('.text')){\n        return\n    } */\n    /* if(!event.target.classList.contains('isUnblurred')){\n        \n        console.log('was blurred')\n        const mySlideImg = event.target;\n        let imgBlur = mySlideImg.style.filter.split(/blur\\(|px\\)/)[1];\n\n        if(imgBlur <= 0){\n            setTimeout(() => {\n                event.target.classList.add('isUnblurred')\n            }, 2000)\n        }\n\n        event.preventDefault();\n        const maxBlur = 20;\n        const minBlur = 0;\n        const blurStep = 0.06; // Adjust blur per unit of deltaY\n        accumulatedDeltaY += Math.abs(event.deltaY);\n        let newBlur = maxBlur - Math.max(0, (accumulatedDeltaY * blurStep) - 60);\n        newBlur = Math.max(minBlur, Math.min(maxBlur, newBlur));\n\n        mySlideImg.style.filter = `blur(${newBlur}px)`;\n        //mySlideImg.parentElement.parentElement.querySelector('.text').style.filter = `blur(${newBlur}px)`;\n\n        return\n    } else { */\n\n    /* const container = event.currentTarget;\n    const slides = Array.from(container.querySelectorAll('.slide'));\n    let targetIndex = slides.find(slide => !slide.querySelector('img').classList.contains('isUnblurred'));\n    if(targetIndex){\n        targetIndex.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start',\n        });\n    }\n\n    console.log(targetIndex.querySelector('img'))\n    setTimeout(() => {\n        targetIndex.querySelector('img').style.filter = `blur(0px)`;\n        targetIndex.querySelector('img').classList.add('isUnblurred');\n    }, 1000);\n\n    return */\n    \n    /* } */\n\n}\n\nfunction transitionEndHandler() {\n    isTransitioning = false;\n}\n\n\n\n\n</script>\n\n\n\n<script>\nexport default {\n  methods: {\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // Trigger reflow\n      el.style.transition = 'opacity 0.5s';\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = 'opacity 0.5s';\n      el.style.opacity = 0;\n      done();\n    },\n    imageUrlFor(image) {\n      // Define your method to generate image URL\n      return `path/to/images/${image}`;\n    }\n  }\n};\n</script>"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsUA,MAAA,cAAe;AAAA,EACb,SAAS;AAAA,IACP,YAAY,IAAI;AACd,SAAG,MAAM,UAAU;AAAA,IACrB;AAAA,IACA,MAAM,IAAI,MAAM;AACX,SAAA;AACH,SAAG,MAAM,aAAa;AACtB,SAAG,MAAM,UAAU;AACd;IACP;AAAA,IACA,MAAM,IAAI,MAAM;AACd,SAAG,MAAM,aAAa;AACtB,SAAG,MAAM,UAAU;AACd;IACP;AAAA,IACA,YAAY,OAAO;AAEjB,aAAO,kBAAkB,KAAK;AAAA,IAChC;AAAA,EACF;AACF;;;;;AA1QM,UAAA,EAAE,UAAU;AAEZ,UAAA,eAAe,gBAAgB,MAAM;AAC3C,UAAM,QAAQ;AACD,UAAM,OAAO;AAEpB,UAAA,UAAU,IAAI,IAAI;AAClB,UAAA,SAAS,IAAI,CAAA,CAAE;AACC,QAAI,IAAI;AAC9B,QAAI,WAAW,SAAS,MAAM,MAAM,SAAS,GAAG;AAExC,YAAA;AAAA,MACJ,OAAO;AAAA,MACP,MAAM,CAAC,EAAE,MAAM,eAAe,SAAS,IAAI;AAAA,IAAA,CAC9C;AA6BK,UAAA,cAAc,CAAC,WAAW;AACvB,aAAA,aAAa,MAAM,MAAM;AAAA,IAAA;AAoFpB,eAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}